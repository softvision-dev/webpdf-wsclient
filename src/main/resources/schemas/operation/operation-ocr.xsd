<?xml version="1.0" encoding="utf-8" ?>
<xs:schema xmlns:tns="http://schema.webpdf.de/1.0/operation" elementFormDefault="qualified"
           targetNamespace="http://schema.webpdf.de/1.0/operation" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:include schemaLocation="operation-common.xsd"/>
    <xs:include schemaLocation="operation-pdfa.xsd"/>
    <xs:complexType name="OcrType">
        <xs:annotation>
            <xs:documentation>
                <p>The "OCR" web service can be used to run character recognition in PDF documents or images.
                    If recognition is run on images, they will be converted to PDF documents. More specifically, a page will be generated for each image in the PDF document, with this page containing the original image and a text layer with the recognized text.
                    Character recognition on PDF documents will only work with documents that do not contain text already. Normally, these will be documents that were generated by scanners and that only have an image per page in the PDF document.
                </p>
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="page" type="tns:OcrPageType" minOccurs="0"/>
            <xs:element name="pdfa" type="tns:PdfaType" minOccurs="0"/>
            <xs:element name="optimization" type="tns:ImageOptimizationType" minOccurs="0"/>
        </xs:all>
        <xs:attribute name="language" default="eng" type="tns:OcrLanguageType">
            <xs:annotation>
                <xs:documentation>
                    <p>Used to specify the language for the output document (PDF/image). The language must be defined for the character recognition operation (OCR) so that the "special characters" of the respective language (e.g. "üäö" in German) can be recognized better. At present, the following languages are supported:
                        <ul>
                            <li>eng = English</li>
                            <li>fra = French</li>
                            <li>spa = Spanish</li>
                            <li>deu = German</li>
                            <li>ita = Italian</li>
                        </ul>
                    </p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="outputFormat" default="pdf">
            <xs:annotation>
                <xs:documentation>
                    <p>Different output formats can be created during character recognition. Generally, the document is generated as a PDF document, but the output can also be as an ASCII document or an XML document if desired (HOCR).
                        <ul>
                            <li>text = Text</li>
                            <li>hocr = XML (hOCR)</li>
                            <li>pdf = PDF</li>
                        </ul>
                    </p>
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="tns:OcrOutputType"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="checkResolution" default="true" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
                    <p>If "true," then the DPI resolution of the output file will be checked. Resolutions of less than 200 DPI are rejected in this check because as a rule, they do not produce good results for character recognition.</p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="imageDpi" default="200">
            <xs:annotation>
                <xs:documentation>
                    <p>Used to set the minimum resolution images will be embedded with in resulting PDF documents. When a value of 0 is set for this parameter, the images shall be embedded using resolutions and dimensions as close as possible to the original source images.</p>
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="tns:DpiType"/>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="forceEachPage" default="false" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
                    <p>If a PDF document contains text content on any page, the web service will refuse to run character recognition again. If, however, a value of "true" is passed for this option, all the pages in the document will be considered individually and character recognition will be run on all pages that do not contain text (layers) so that a new layer with text will be generated for them.</p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="normalizePageRotation" default="false" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
                    <p>If "true", then, for the recognition of a rotated text, the system will attempt to rotate the page in such a way that the text in the document will not appear to be rotated and will be shown "upright."</p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="failOnWarning" default="false" type="xs:boolean">
            <xs:annotation>
                <xs:documentation>
                    <p>If "true", character recognition will fail even in the event of warnings that do not prevent recognition, but that make it very unlikely for a meaningful result to be generated.</p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="jpegQuality" default="75">
            <xs:annotation>
                <xs:documentation>
                    <p>A percentage that sets the compression ratio and influences the quality of JPEG images, that shall be embedded in resulting PDF documents. Higher values will result in less compressed images of higher quality.</p>
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:int">
                    <xs:minInclusive value="0"/>
                    <xs:maxInclusive value="100"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="ocrMode" default="pageSegments" type="tns:OcrModeType">
            <xs:annotation>
                <xs:documentation>
                    <p>Specifies the mode used to find structured text on the pages. Depending on which mode is chosen, different requirements are set for the text and different assumptions are made about the text.
                        <ul>
                            <li>pageSegments = The text on the page is clearly structured and decomposable into clear paragraphs and layout segments. Overlapping of text elements/lines does not occur. Headings and thus texts with deviating text sizes and font set, could be present.</li>
                            <li>column = The text is arranged on the pages in several, more or less uniform columns, next to each other. Font and text size are mostly uniform.</li>
                            <li>unfiltered = No assumptions are made about the text, any letters that can be found are recognized as such, regardless of whether they can be assigned to a text column, or line, or even a word. Font size and typeface can vary absolutely and texts are not necessarily arranged in clearly recognizable columns or according to a fixed layout. Texts and lines can overlap. (This mode usually recognizes more text (especially with more complex layouts), but usually also generates the most error detections, since no result is sorted out due to its deviation from the norm.</li>
                        </ul>
                    </p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:simpleType name="OcrLanguageType">
        <xs:annotation>
            <xs:documentation>
                <p>Used to specify the language for the output document (PDF/image). The language must be defined for the character recognition operation (OCR) so that the "special characters" of the respective language (e.g. "üäö" in German) can be recognized better. At present, the following languages are supported:
                    <ul>
                        <li>eng = English</li>
                        <li>fra = French</li>
                        <li>spa = Spanish</li>
                        <li>deu = German</li>
                        <li>ita = Italian</li>
                    </ul>
                </p>
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="eng"/>
            <xs:enumeration value="deu"/>
            <xs:enumeration value="fra"/>
            <xs:enumeration value="ita"/>
            <xs:enumeration value="spa"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="OcrOutputType">
        <xs:annotation>
            <xs:documentation>
                <p>Different output formats can be created during character recognition. Generally, the document is generated as a PDF document, but the output can also be as an ASCII document or an XML document if desired (HOCR).
                    <ul>
                        <li>text = Text</li>
                        <li>hocr = XML (hOCR)</li>
                        <li>pdf = PDF</li>
                    </ul>
                </p>
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="text"/>
            <xs:enumeration value="hocr"/>
            <xs:enumeration value="pdf"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="OcrPageType">
        <xs:annotation>
            <xs:documentation>
                <p>If images are converted to PDF documents during the character recognition process, the size of the page will be computed based on the size of the image and the DPI resolution. This element can be used to specify a custom page size instead.</p>
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="width" default="210">
            <xs:annotation>
                <xs:documentation>
                    <p>Width of the page in the PDF document.</p>
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:int">
                    <xs:minInclusive value="0"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="height" default="297">
            <xs:annotation>
                <xs:documentation>
                    <p>Height of the page in the PDF document.</p>
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:int">
                    <xs:minInclusive value="0"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="metrics" default="mm" type="tns:MetricsType">
            <xs:annotation>
                <xs:documentation>
                    <p>
                        Unit for the page size arguments.
                        <ul>
                            <li>pt = Points(1/72 inch)</li>
                            <li>pc = Picas(12 points)</li>
                            <li>px = Pixels(1/96 inch)</li>
                            <li>mm = Millimeters</li>
                            <li>in = Inches</li>
                        </ul>
                    </p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:simpleType name="OcrModeType">
        <xs:annotation>
            <xs:documentation>
                <p>Specifies the mode used to find structured text on the pages. Depending on which mode is chosen, different requirements are set for the text and different assumptions are made about the text.
                    <ul>
                        <li>pageSegments = The text on the page is clearly structured and decomposable into clear paragraphs and layout segments. Overlapping of text elements/lines does not occur. Headings and thus texts with deviating text sizes and font set, could be present.</li>
                        <li>column = The text is arranged on the pages in several, more or less uniform columns, next to each other. Font and text size are mostly uniform.</li>
                        <li>unfiltered = No assumptions are made about the text, any letters that can be found are recognized as such, regardless of whether they can be assigned to a text column, or line, or even a word. Font size and typeface can vary absolutely and texts are not necessarily arranged in clearly recognizable columns or according to a fixed layout. Texts and lines can overlap. (This mode usually recognizes more text (especially with more complex layouts), but usually also generates the most error detections, since no result is sorted out due to its deviation from the norm.</li>
                    </ul>
                </p>
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="pageSegments"/>
            <xs:enumeration value="column"/>
            <xs:enumeration value="unfiltered"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>